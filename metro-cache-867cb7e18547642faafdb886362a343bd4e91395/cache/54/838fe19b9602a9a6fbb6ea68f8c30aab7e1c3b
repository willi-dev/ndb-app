__d(function (global, _require, module, exports, _dependencyMap) {
  var arrayEach = _require(_dependencyMap[0], './arrayEach'),
      baseMergeDeep = _require(_dependencyMap[1], './baseMergeDeep'),
      isArray = _require(_dependencyMap[2], '../lang/isArray'),
      isArrayLike = _require(_dependencyMap[3], './isArrayLike'),
      isObject = _require(_dependencyMap[4], '../lang/isObject'),
      isObjectLike = _require(_dependencyMap[5], './isObjectLike'),
      isTypedArray = _require(_dependencyMap[6], '../lang/isTypedArray'),
      keys = _require(_dependencyMap[7], '../object/keys');

  function baseMerge(object, source, customizer, stackA, stackB) {
    if (!isObject(object)) {
      return object;
    }

    var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
        props = isSrcArr ? undefined : keys(source);
    arrayEach(props || source, function (srcValue, key) {
      if (props) {
        key = srcValue;
        srcValue = source[key];
      }

      if (isObjectLike(srcValue)) {
        stackA || (stackA = []);
        stackB || (stackB = []);
        baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
      } else {
        var value = object[key],
            result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
            isCommon = result === undefined;

        if (isCommon) {
          result = srcValue;
        }

        if ((result !== undefined || isSrcArr && !(key in object)) && (isCommon || (result === result ? result !== value : value === value))) {
          object[key] = result;
        }
      }
    });
    return object;
  }

  module.exports = baseMerge;
});