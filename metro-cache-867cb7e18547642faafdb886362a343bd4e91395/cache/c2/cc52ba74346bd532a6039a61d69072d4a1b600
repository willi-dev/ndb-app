__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _Ionicons = _require(_dependencyMap[2], "@expo/vector-icons/Ionicons");

  var _Ionicons2 = _interopRequireDefault(_Ionicons);

  var _themeManager = _require(_dependencyMap[3], './themeManager');

  var _themeManager2 = _interopRequireDefault(_themeManager);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var defaultTheme = {
    BUTTON_FONT_COLOR: '#fff',
    BUTTON_ROUNDED_RADIUS: 25,
    BUTTON_ROUNDED_HEIGHT: 50,
    BUTTON_ROUNDED_FONT_SIZE: 12,
    BUTTON_SQUARED_HEIGHT: 50,
    BUTTON_SQUARED_FONT_SIZE: 12,
    BUTTON_STATE_SUCCESS: '#94de45',
    BUTTON_STATE_DANGER: '#ff9c00',
    BUTTON_STATE_PRIMARY: '#2f8cff',
    BUTTON_ICON_SIZE: 25,
    BUTTON_ICON_COLOR: '#fff',
    BUTTON_ACTIVE_ICON_COLOR: 'rgba(0, 0, 0, 0.5)'
  };

  _themeManager2.default.setSource('Button', function () {
    return defaultTheme;
  });

  var defaultStyle = function defaultStyle(theme) {
    return {
      container: {
        flex: 1
      },
      baseBtn: {
        justifyContent: 'center',
        padding: 10,
        paddingHorizontal: 20
      },
      baseText: {
        alignSelf: 'center',
        color: theme.BUTTON_FONT_COLOR,
        paddingHorizontal: 8,
        fontWeight: '600'
      },
      innerContainer: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center'
      },
      kind: {
        rounded: {
          btn: {
            borderRadius: theme.BUTTON_ROUNDED_RADIUS,
            height: theme.BUTTON_ROUNDED_HEIGHT
          },
          text: {
            fontSize: theme.BUTTON_ROUNDED_FONT_SIZE,
            fontWeight: '600'
          }
        },
        squared: {
          btn: {
            height: theme.BUTTON_SQUARED_HEIGHT
          },
          text: {
            fontSize: theme.BUTTON_SQUARED_FONT_SIZE
          }
        }
      },
      states: {
        success: {
          backgroundColor: theme.BUTTON_STATE_SUCCESS
        },
        danger: {
          backgroundColor: theme.BUTTON_STATE_DANGER
        },
        primary: {
          backgroundColor: theme.BUTTON_STATE_PRIMARY
        },
        naked: {
          backgroundColor: 'transparent'
        }
      }
    };
  };

  var Button = function Button(props) {
    var activeOpacity = props.activeOpacity,
        disabled = props.disabled,
        children = props.children,
        style = props.style,
        textStyle = props.textStyle,
        disabledStyle = props.disabledStyle,
        disabledTextStyle = props.disabledTextStyle,
        type = props.type,
        kind = props.kind,
        uppercase = props.uppercase,
        iconName = props.iconName,
        iconSize = props.iconSize,
        iconColor = props.iconColor,
        iconActiveColor = props.iconActiveColor,
        iconPosition = props.iconPosition,
        onPress = props.onPress,
        onPressIn = props.onPressIn,
        onPressOut = props.onPressOut,
        onLongPress = props.onLongPress,
        selected = props.selected,
        onChange = props.onChange,
        value = props.value;

    var theme = props.theme || _themeManager2.default.getStyle('Button');

    var baseStyle = defaultStyle(theme);
    var switcherProp = onChange && {
      onPress: function onPress() {},
      onPressOut: onChange.bind(null, value)
    };
    var touchableProps = {
      onPress: onPress,
      onPressIn: onPressIn,
      onPressOut: onPressOut,
      onLongPress: onLongPress
    };
    var btnStyles = [baseStyle.baseBtn, baseStyle.kind[kind].btn, baseStyle.states[type], style];
    var textStyles = [baseStyle.baseText, baseStyle.kind[kind].text, textStyle, disabled ? disabledTextStyle : {}];
    var leftIcon = void 0;
    var rightIcon = void 0;

    if (iconName) {
      var icon = _react2.default.createElement(_Ionicons2.default, {
        name: iconName,
        size: iconSize || theme.BUTTON_ICON_SIZE,
        color: selected ? iconActiveColor || theme.BUTTON_ACTIVE_ICON_COLOR : iconColor || theme.BUTTON_ICON_COLOR
      });

      leftIcon = iconPosition === 'left' && icon;
      rightIcon = iconPosition === 'right' && icon;
    }

    var content = void 0;

    if (children) {
      content = _react2.default.createElement(_reactNative.Text, {
        style: textStyles
      }, uppercase ? children.toUpperCase() : children);
    }

    return _react2.default.createElement(_reactNative.View, {
      style: [baseStyle.container, disabled ? disabledStyle : {}]
    }, _react2.default.createElement(_reactNative.TouchableOpacity, _extends({}, touchableProps, switcherProp, {
      disabled: disabled,
      style: btnStyles,
      activeOpacity: activeOpacity,
      accessibilityTraits: 'button',
      accessibilityComponentType: 'button'
    }), _react2.default.createElement(_reactNative.View, {
      style: baseStyle.innerContainer
    }, leftIcon, content, rightIcon)));
  };

  Button.propTypes = {
    activeOpacity: _react.PropTypes.number,
    disabled: _react.PropTypes.bool,
    children: _react.PropTypes.any,
    style: _react.PropTypes.oneOfType([_react.PropTypes.object, _react.PropTypes.array]),
    textStyle: _react.PropTypes.oneOfType([_react.PropTypes.object, _react.PropTypes.array]),
    disabledStyle: _react.PropTypes.oneOfType([_react.PropTypes.object, _react.PropTypes.array]),
    disabledTextStyle: _react.PropTypes.oneOfType([_react.PropTypes.object, _react.PropTypes.array]),
    type: _react.PropTypes.oneOf(['primary', 'danger', 'success', 'naked']),
    kind: _react.PropTypes.oneOf(['rounded', 'squared']),
    onPress: _react.PropTypes.func,
    onPressIn: _react.PropTypes.func,
    onPressOut: _react.PropTypes.func,
    onLongPress: _react.PropTypes.func,
    iconName: _react.PropTypes.string,
    iconSize: _react.PropTypes.number,
    iconColor: _react.PropTypes.string,
    iconActiveColor: _react.PropTypes.string,
    iconPosition: _react.PropTypes.oneOf(['left', 'right']),
    uppercase: _react.PropTypes.bool,
    theme: _react.PropTypes.object,
    onChange: _react.PropTypes.func,
    selected: _react.PropTypes.bool,
    value: _react.PropTypes.oneOfType([_react2.default.PropTypes.number, _react2.default.PropTypes.string])
  };
  Button.defaultProps = {
    activeOpacity: 0.8,
    disabled: false,
    disabledStyle: {
      opacity: 0.3
    },
    type: 'primary',
    kind: 'rounded',
    onPress: function onPress() {},
    onPressIn: function onPressIn() {},
    onPressOut: function onPressOut() {},
    onLongPress: function onLongPress() {},
    iconPosition: 'right',
    uppercase: true
  };
  exports.default = Button;
  module.exports = exports['default'];
});