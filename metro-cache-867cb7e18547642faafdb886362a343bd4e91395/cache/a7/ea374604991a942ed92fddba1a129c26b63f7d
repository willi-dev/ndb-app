__d(function (global, _require, module, exports, _dependencyMap) {
  var arrayCopy = _require(_dependencyMap[0], './arrayCopy'),
      isArguments = _require(_dependencyMap[1], '../lang/isArguments'),
      isArray = _require(_dependencyMap[2], '../lang/isArray'),
      isArrayLike = _require(_dependencyMap[3], './isArrayLike'),
      isPlainObject = _require(_dependencyMap[4], '../lang/isPlainObject'),
      isTypedArray = _require(_dependencyMap[5], '../lang/isTypedArray'),
      toPlainObject = _require(_dependencyMap[6], '../lang/toPlainObject');

  function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
    var length = stackA.length,
        srcValue = source[key];

    while (length--) {
      if (stackA[length] == srcValue) {
        object[key] = stackB[length];
        return;
      }
    }

    var value = object[key],
        result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
        isCommon = result === undefined;

    if (isCommon) {
      result = srcValue;

      if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
        result = isArray(value) ? value : isArrayLike(value) ? arrayCopy(value) : [];
      } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
        result = isArguments(value) ? toPlainObject(value) : isPlainObject(value) ? value : {};
      } else {
        isCommon = false;
      }
    }

    stackA.push(srcValue);
    stackB.push(result);

    if (isCommon) {
      object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
    } else if (result === result ? result !== value : value === value) {
      object[key] = result;
    }
  }

  module.exports = baseMergeDeep;
});