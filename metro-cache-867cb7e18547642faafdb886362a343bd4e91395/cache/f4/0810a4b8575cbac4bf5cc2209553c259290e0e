__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _prodInvariant = _require(_dependencyMap[0], './reactProdInvariant'),
      _assign = _require(_dependencyMap[1], "object-assign");

  var ReactNoopUpdateQueue = _require(_dependencyMap[2], './ReactNoopUpdateQueue');

  var canDefineProperty = _require(_dependencyMap[3], './canDefineProperty');

  var emptyObject = _require(_dependencyMap[4], "fbjs/lib/emptyObject");

  var invariant = _require(_dependencyMap[5], "fbjs/lib/invariant");

  var lowPriorityWarning = _require(_dependencyMap[6], './lowPriorityWarning');

  function ReactComponent(props, context, updater) {
    this.props = props;
    this.context = context;
    this.refs = emptyObject;
    this.updater = updater || ReactNoopUpdateQueue;
  }

  ReactComponent.prototype.isReactComponent = {};

  ReactComponent.prototype.setState = function (partialState, callback) {
    !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
    this.updater.enqueueSetState(this, partialState);

    if (callback) {
      this.updater.enqueueCallback(this, callback, 'setState');
    }
  };

  ReactComponent.prototype.forceUpdate = function (callback) {
    this.updater.enqueueForceUpdate(this);

    if (callback) {
      this.updater.enqueueCallback(this, callback, 'forceUpdate');
    }
  };

  if (process.env.NODE_ENV !== 'production') {
    var deprecatedAPIs = {
      isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
      replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
    };

    var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
      if (canDefineProperty) {
        Object.defineProperty(ReactComponent.prototype, methodName, {
          get: function get() {
            lowPriorityWarning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
            return undefined;
          }
        });
      }
    };

    for (var fnName in deprecatedAPIs) {
      if (deprecatedAPIs.hasOwnProperty(fnName)) {
        defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
      }
    }
  }

  function ReactPureComponent(props, context, updater) {
    this.props = props;
    this.context = context;
    this.refs = emptyObject;
    this.updater = updater || ReactNoopUpdateQueue;
  }

  function ComponentDummy() {}

  ComponentDummy.prototype = ReactComponent.prototype;
  ReactPureComponent.prototype = new ComponentDummy();
  ReactPureComponent.prototype.constructor = ReactPureComponent;

  _assign(ReactPureComponent.prototype, ReactComponent.prototype);

  ReactPureComponent.prototype.isPureReactComponent = true;
  module.exports = {
    Component: ReactComponent,
    PureComponent: ReactPureComponent
  };
});